// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package edu.vt.cs5254.fancygallery

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class GalleryItemJsonAdapter(
  moshi: Moshi
) : JsonAdapter<GalleryItem>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "id", "url_s",
      "latitude", "longitude", "owner")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "title")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "latitude")

  public override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("GalleryItem").append(')') }

  public override fun fromJson(reader: JsonReader): GalleryItem {
    var title: String? = null
    var id: String? = null
    var url: String? = null
    var latitude: Double? = null
    var longitude: Double? = null
    var owner: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        1 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        2 -> url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("url", "url_s",
            reader)
        3 -> latitude = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("latitude",
            "latitude", reader)
        4 -> longitude = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("longitude",
            "longitude", reader)
        5 -> owner = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("owner", "owner",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return GalleryItem(
        title = title ?: throw Util.missingProperty("title", "title", reader),
        id = id ?: throw Util.missingProperty("id", "id", reader),
        url = url ?: throw Util.missingProperty("url", "url_s", reader),
        latitude = latitude ?: throw Util.missingProperty("latitude", "latitude", reader),
        longitude = longitude ?: throw Util.missingProperty("longitude", "longitude", reader),
        owner = owner ?: throw Util.missingProperty("owner", "owner", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: GalleryItem?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("url_s")
    stringAdapter.toJson(writer, value_.url)
    writer.name("latitude")
    doubleAdapter.toJson(writer, value_.latitude)
    writer.name("longitude")
    doubleAdapter.toJson(writer, value_.longitude)
    writer.name("owner")
    stringAdapter.toJson(writer, value_.owner)
    writer.endObject()
  }
}
